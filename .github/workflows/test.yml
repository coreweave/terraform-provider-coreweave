# Terraform Provider testing workflow.
name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - 'README.md'

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go mod download
      - run: go build -v ./...
      - name: Run linters
        uses: golangci/golangci-lint-action@v8 # v8
        with:
          version: v2.4.0

  generate:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      # We need the latest version of Terraform for our documentation generation to use
      - uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_wrapper: false
      - run: make generate
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  snapshot-build:
    name: Snapshot Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false  # This job uses a separate cache, because of the multiarch build. This makes it slightly slower the first time, but significantly faster on subsequent runs.
      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-goreleaser-snapshot-go-${{ hashFiles('**/go.sum') }}
      - name: Test snapshot build
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          version: latest
          args: release --snapshot --clean --skip sign

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Tests
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
      - run: go mod download
      - name: Check go mod tidy
        run: go mod tidy -diff
      - run: go test -v -cover ./...
        timeout-minutes: 10

  pr-title-format:
    name: Validate PR title
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Ensure PR title matches conventional commits format
        id: check_pr_title
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          re_types="build|chore|ci|deps|docs|feat|fix|perf|refactor|revert|style|test"
          re_scope="\([[:alnum:]._-]+\)"
          re_message="([[:alnum:]])+([[:space:][:print:]]*)"
          re_full="^($re_types)($re_scope)?: ($re_message)$"
          echo "Checking PR title '${PR_TITLE}' for conventional commits format..."
          set -x
          grep --color=always -E "$re_full" <<< "${PR_TITLE}" || {
            cat <<EOF
          PR title does not match conventional commits format. Please update the PR title to match the format: '<type>(<scope>): <description>'"
          See https://www.conventionalcommits.org/en/v1.0.0/ for more information.
          Test regex: '$re_full'
          EOF
            exit 1
          }
